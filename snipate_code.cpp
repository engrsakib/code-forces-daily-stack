{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"1": {
  "prefix": "cpplang",
  "body": [
    "#include <bits/stdc++.h>",
    "",
    "#define br \"\\n\"",
    "#define ll long long",
    "#define yes cout << \"YES\\n\"",
    "#define no cout << \"NO\\n\"",
    "using namespace std;",
    "",
    "class Solution",
    "{",
    "public:",
    "    void solve()",
    "    {",
    "        $0",
    "    }",
    "};",
    "signed main()",
    "{",
    "    // _Created : ${CURRENT_DATE} ${CURRENT_MONTH_NAME} ${CURRENT_YEAR} ||  ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
			"    // _File    : ${TM_FILENAME}",
			"    // Md. Nazmus Sakib",
			"    /* Enter your code here. Read input from STDIN. Print output to STDOUT */",
			"	//اللهم صل على سيدنا محمدن النبى الامى وآله وسلم",
    "    ios::sync_with_stdio(false);",
    "    cin.tie(NULL);",
    "    ll t = 1;",
    "    cin >> t;",
    "    while (t--)",
    "    {",
    "        Solution obj;",
    "        obj.solve();",
    "    }",
    "    return 0;",
    "}"
  ],
  "description": "1"
},
	"2 Singly Linked List": {
		"prefix": "node",
		"body": [
			"class Node{",
			"    public:",
			"        int val;",
			"        Node *next;",
			"        Node(int val)",
			"        {",
			"            this->val = val;",
			"            this->next = NULL;",
			"        }",
			"};"
		],
		"description": "2"
	},
	"3 Doubly Linked List": {
		"prefix": "dnode",
		"body": [
			"class Node{",
			"    public:",
			"        int val;",
			"        Node *next;",
			"        Node *prev;",
			"        Node(int val)",
			"        {",
			"            this->prev = NULL;",
			"            this->val = val;",
			"            this->next = NULL;",
			"        }",
			"};"
		],
		"description": "3"
	},
	"4 Vector Stack": {
		"prefix": "vstack",
		"body": [
			"class my_stack",
			"{",
			"    public:",
			"    vector <int> sakib;",
			"    void push(int val)",
			"    {",
			"        sakib.push_back(val);",
			"    }",
			"    void pop()",
			"    {",
			"        sakib.pop_back();",
			"    }",
			"    int top()",
			"    {",
			"        return sakib.back();",
			"    }",
			"    int size()",
			"    {",
			"        return sakib.size();",
			"    }",
			"    bool empty()",
			"    {",
			"        if(sakib.size() != 0) return false;",
			"        else return true;",
			"    }",
			"};"
		],
		"description": "Vector Stack"
	},
	"5 List Stack": {
		"prefix": "lsstack",
		"body": [
			"class my_stack",
			"{",
			"    public:",
			"    list <int> sakib;",
			"    void push(int val)",
			"    {",
			"        sakib.push_back(val);",
			"    }",
			"    void pop()",
			"    {",
			"        sakib.pop_back();",
			"    }",
			"    int top()",
			"    {",
			"        return sakib.back();",
			"    }",
			"    int size()",
			"    {",
			"        return sakib.size();",
			"    }",
			"    bool empty()",
			"    {",
			"        if(sakib.size() != 0) return false;",
			"        else return true;",
			"    }",
			"};"
		],
		"description": "5 List Stack"
	},
	"6 doubly linked list Stack": {
		"prefix": "dscstack",
		"body": [
			"class Node{",
			"    public:",
			"        int val;",
			"        Node *next;",
			"        Node *prev;",
			"        Node(int val)",
			"        {",
			"            this->prev = NULL;",
			"            this->val = val;",
			"            this->next = NULL;",
			"        }",
			"};",
			"class my_stack",
			"{",
			"    public:",
			"    Node *head = NULL;",
			"    Node *tail = NULL;",
			"    int sizes = 0;",
			"    void push(int val)",
			"    {",
			"        Node *new_Node = new Node(val);",
			"        sizes++;",
			"        if(head == NULL)",
			"        {",
			"            head = tail = new_Node;",
			"            return;",
			"        }",
			"        tail->next = new_Node;",
			"        new_Node->prev = tail;",
			"        tail = tail->next;",
			"    }",
			"    void pop()",
			"    {",
			"        sizes--;",
			"        Node *delete_Noed = tail;",
			"        tail = tail->prev;",
			"        if(tail == NULL)",
			"        {",
			"            head = NULL;",
			"        }",
			"        else",
			"        {",
			"            tail->next = NULL;",
			"        }",
			"        delete delete_Noed;",
			"    }",
			"    int top()",
			"    {",
			"        return tail->val;",
			"    }",
			"    int size()",
			"    {",
			"        return sizes;",
			"    }",
			"    bool empty()",
			"    {",
			"        if(sizes != 0) return false;",
			"        else return true;",
			"    }",
			"};"
		],
		"description": "6 doubly linked list Stack"
	},
	"7 Queue singlily linked list": {
		"prefix": "qsingly",
		"body": [
			"class Node{",
			"    public:",
			"        int val;",
			"        Node *next;",
			"        Node(int val)",
			"        {",
			"            this->val = val;",
			"            this->next = NULL;",
			"        }",
			"};",
			"class my_queye{",
			"    public:",
			"        Node *head = NULL;",
			"        Node *tail = NULL;",
			"        int count = 0;",
			"        void push(int val)",
			"        {",
			"            Node *new_Node = new Node(val);",
			"            count++;",
			"            if(head == NULL)",
			"            {",
			"                head = new_Node;",
			"                tail = new_Node;",
			"                return;",
			"            }",
			"            tail->next = new_Node;",
			"            tail = new_Node;",
			"        }",
			"        void pop()",
			"        {",
			"            Node *delete_Node = head;",
			"            count--;",
			"            head = head->next;",
			"            delete delete_Node;",
			"            if(head == NULL)",
			"            {",
			"                tail = NULL;",
			"            }",
			"        }",
			"        int fornt()",
			"        {",
			"            return head->val;",
			"        }",
			"        int sizes()",
			"        {",
			"            return count;",
			"        }",
			"        bool empty()",
			"        {",
			"            if(count == 0) return true;",
			"            else return false;",
			"        }",
			"};"
		],
		"description": "7 Queue singlily linked list"
	},
	"8 Queue doubly linked list": {
		"prefix": "qdoubly",
		"body": [
			"class Node{",
			"    public:",
			"        int val;",
			"        Node *next;",
			"        Node *prev;",
			"        Node(int val)",
			"        {",
			"            this->prev = NULL;",
			"            this->val = val;",
			"            this->next = NULL;",
			"        }",
			"};",
			"class my_queye{",
			"    public:",
			"        Node *head = NULL;",
			"        Node *tail = NULL;",
			"        int count = 0;",
			"        void push(int val)",
			"        {",
			"            Node *new_Node = new Node(val);",
			"            count++;",
			"            if(head == NULL)",
			"            {",
			"                head = new_Node;",
			"                tail = new_Node;",
			"                return;",
			"            }",
			"            tail->next = new_Node;",
			"            new_Node->prev = tail;",
			"            tail = new_Node;",
			"        }",
			"        void pop()",
			"        {",
			"            Node *delete_Node = head;",
			"            count--;",
			"            head = head->next;",
			"            delete delete_Node;",
			"            if(head == NULL)",
			"            {",
			"                tail = NULL;",
			"                return;",
			"            }",
			"            ",
			"            ",
			"                head->prev = NULL;",
			"            ",
			"        }",
			"        int fornt()",
			"        {",
			"            return head->val;",
			"        }",
			"        int sizes()",
			"        {",
			"            return count;",
			"        }",
			"        bool empty()",
			"        {",
			"            if(count == 0) return true;",
			"            else return false;",
			"        }",
			"};"
		],
		"description": "8 Queue doubly linked list"
	},
	"9 Queue list": {
		"prefix": "qlist",
		"body": [
			"class my_queye{",
			"    public:",
			"       list <int> sakib;",
			"        void push(int val)",
			"        {",
			"            sakib.push_back(val);",
			"        }",
			"        void pop()",
			"        {",
			"            sakib.pop_front();",
			"            ",
			"        }",
			"        int fornt()",
			"        {",
			"            return sakib.front();",
			"        }",
			"        int sizes()",
			"        {",
			"            return sakib.size();",
			"        }",
			"        bool empty()",
			"        {",
			"            return sakib.empty();",
			"        }",
			"};"
		],
		"description": "9 Queue list"
	},
	"10 Binary Tree Node": {
		"prefix": "bNode",
		"body": [
			"class Node{",
			"    public:",
			"        int val;",
			"        Node *left;",
			"        Node *right;",
			"        Node(int val)",
			"        {",
			"            this->val = val;",
			"            this->left = NULL;",
			"            this->right = NULL;",
			"        }",
			"};"
		],
		"description": "10 Binary Tree Node"
	},
	"11 bainary tree input": {
		"prefix": "binput",
		"body": [
			"Node *input_Node()",
			"{",
			"    int val;",
			"    cin >> val;",
			"    Node *root;",
			"    if(val == -1) root = NULL;",
			"    else root = new Node(val);",
			"",
			"    queue <Node *> q;",
			"    if(root) q.push(root);",
			"    while(!q.empty())",
			"    {",
			"        Node *p = q.front();",
			"        q.pop();",
			"        //Kaj Jeta amora korbo",
			"        int l, r;",
			"        cin >> l >> r;",
			"        Node *my_Left;",
			"        Node *my_Right;",
			"        if(l == -1) my_Left = NULL;",
			"        else my_Left = new Node(l);",
			"        if(r == -1) my_Right = NULL;",
			"        else my_Right = new Node(r);",
			"",
			"        // Cannection",
			"        p->left = my_Left;",
			"        p->right = my_Right;",
			"",
			"        //Chield PUSH",
			"        if(p->left) q.push(p->left);",
			"        if(p->right) q.push(p->right);",
			"    }",
			"    return root;",
			"}"
		],
		"description": "11 bainary tree input"
	},
	"12 level Order print": {
		"prefix": "blevelprint",
		"body": [
			"void level_order(Node *root)",
			"{",
			"    queue <Node *> q;",
			"    q.push(root);",
			"    cout << \"Left to Right\" << endl;",
			"    while(!q.empty())",
			"    {",
			"        Node *f = q.front();",
			"        q.pop();",
			"",
			"        cout << f->val << \" \";",
			"        //left to right",
			"        if(f->left) q.push(f->left);",
			"        if(f->right) q.push(f->right);",
			"    }",
			"}"
		],
		"description": "12 level Order"
	}
}